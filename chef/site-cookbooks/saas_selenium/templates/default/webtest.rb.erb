require 'erb'
require 'open3'
require 'sidekiq'

node    = ARGV[0]
type  = ARGV[1]
url     = ARGV[2]
user  = ARGV[3]
pass  = ARGV[4]
place   = ARGV[5]

class Template
  attr_accessor :type, :url, :user, :pass, :place
  def template_binding
    binding
  end
end

class WebTest
  include Sidekiq::Worker
  def perform(node, type, url, user, pass, place)
        home = "/home/selenium"
        sleep 1
    test_file = File.open("#{home}/features/#{type}.feature", "w+")
    template = File.read("#{home}/templates/#{type}.erb")

    feature = Template.new
    feature.type  = type
    feature.url     = url
    feature.user  = user
    feature.pass  = pass
        feature.place   = place

    test_file << ERB.new(template).result(feature.template_binding)
    test_file.close

    Open3.popen2e( "cucumber -n #{type} > #{home}/logs/#{type}.log.txt" ) do |stdin, stdout_and_stderr, wait_thr|
      exit_status = wait_thr.value
            if exit_status.success?
                `zabbix_sender -z 10.51.35.7 -s "#{node}" -k web_test_result -o "Successfully navigated #{url}" >> "#{home}/sidekiq.log"`
          `echo "SUCCESS: #{type} #{url} successfully interacted with.\n" >> "#{home}/logs/sidekiq.log.txt"`
            else
                `echo "FAILURE: #{type} #{url} failed interaction.\n" >> "#{home}/logs/sidekiq.log.txt"`
            end
    end
  end
end

WebTest.perform_async(node, type, url, user, pass, place)